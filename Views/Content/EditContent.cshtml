@using Fpm.MainUI
@using Fpm.MainUI.Helpers
@using iTextSharp.text.pdf.qrcode
@model Fpm.ProfileData.Entities.Profile.ContentItem
<link href="@(AppConfig.JsPath)tiny_mce/skins/lightgray/skin.min.css" rel="stylesheet" type="text/css" />

<script src="@(AppConfig.JsPath)tiny_mce/tinymce.min.js" type="text/javascript"></script>
<script src="@(AppConfig.JsPath)tiny_mce/jquery.tinymce.min.js" type="text/javascript"></script>
<script src="@(AppConfig.JsPath)content-management.js" type="text/javascript"></script>

@{ Layout = "~/Views/Shared/_LayoutPage.cshtml"; }

@{
    var isUserAdmin = UserDetails.CurrentUser().IsAdministrator;
    var hasUserAccessToProfile = UserDetails.CurrentUser().HasWritePermissionsToProfile(Model.ProfileId);
    var cancelButtonLabel = hasUserAccessToProfile
        ? "Cancel"
        : "Back";
}

<div class="container">
    @using (Html.BeginForm("UpdateContent", "Content", FormMethod.Post, new { id = "EditContent" }))
    {
        <h2 class="subheading">Edit content</h2>

        <div class="row form-horizontal">
            <label class="col-lg-2 control-label">Profile:</label>
            <div class="col-lg-10 form-control-static">@Model.ProfileName</div>
        </div>

        <div class="row form-group form-horizontal">
            <label class="col-lg-2 control-label">Content Key:</label>
            <div class="col-lg-10">
                @if (isUserAdmin)
                {
                    @Html.TextBoxFor(model => model.ContentKey, new { @class = "form-control" })
                    <span class="field-validation-valid" data-valmsg-for="ContentKey" data-valmsg-replace="true"></span>
                }
                else
                {
                    @Model.ContentKey
                }
            </div>
        </div>

        @* Description *@
        <div class="row form-group form-horizontal">
            <label class="col-lg-2 control-label">Description:</label>
            <div class="col-lg-10">
                @Html.TextBoxFor(model => model.Description, new { @class = "form-control" })
                <span class="field-validation-valid" data-valmsg-for="Description" data-valmsg-replace="true"></span>
            </div>
        </div>

        @* Plain text checkbox *@
    if (Model.PlainTextContent && isUserAdmin == false)
    {
        <div class="row form-group form-horizontal">
            <label class="col-lg-2 control-label">Plain text:</label>
            <div class="col-lg-10">
                @Html.HiddenFor(x => x.PlainTextContent)
                @Html.CheckBox("PlainTextContent", Model.PlainTextContent, new
           {
               value = Model.PlainTextContent,
               disabled = "disabled",
               id = "disabledCheckBox",
               @class = "form-control"
           })
            </div>
        </div>
    }
    else
    {
        if (isUserAdmin)
        {
            <div class="row form-group form-horizontal">
                    <label class="col-lg-2 control-label">Plain text:</label>
                <div class="col-lg-10">
                    @Html.CheckBoxFor(model => model.PlainTextContent, new { @class = "checkbox-inline" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(x => x.PlainTextContent)
        }
    }


    @* Plain text warning *@
        <p class="warning" id="ContentWarning" style="display: none;">
            This content item is set to be plain text.
            Any HTML entered below will be converted to plain text when saved.
        </p>


        @* Content text area *@
        <div class="row">
            <div class="col-lg-12">
            @Html.TextAreaFor(m => m.Content, new {@class = "tinymce", style = "width: 100%;"})
                </div>
        </div>

        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.ProfileId)
        @Html.HiddenFor(x => x.ProfileName)
        @Html.HiddenFor(x => x.Description)
        @Html.HiddenFor(x => x.ReturnUrl)
        @Html.HiddenFor(x => x.ContentKey)
        @Html.HiddenFor(x => x.Content, new { @Id = "oldContent", @Name = "oldContent" })

        <div class="row form-group">

            <div class="form-control-static col-lg-12">
                @if (hasUserAccessToProfile)
                {
                    <input class="btn btn-primary col-lg-1" id="confirm" type="submit" value="Save" />
                }
                <input class="btn btn-secondary col-lg-1" id="cancel" type="button" 
                       onclick="location.href = '@Model.ReturnUrl    '" value="@cancelButtonLabel" />


                @if (hasUserAccessToProfile)
                {
                    <input class="btn btn-danger col-lg-1" id="delete" type="button" value="Delete" />
                }
                else
                {
                    <p class="warning">You do not have permission to save changes for "@Model.ProfileName"</p>
                }
            </div>
        </div>

    }
</div>
